webpack1.x
----------------------------------
webpack2.x
----------------------------------
webpack3.x
----------------------------------
webpack4.x
---------------------------------

官网: https://webpack.js.org/

---------------------------------
静态开发(H5+C3)	gulp
vue\react  ->  webpack
DEMO  -> webpack 转
---------------------------------
webpack是什么?
	打包(bundle)工具(模块打包器)
	前端工程师，必不可少工具
	webpack4.x
webpack作用:
1. 打包  (把多个文件打包成一个js文件， 减少服务器压力、带宽)
2. 转化  (比如less、sass、ts)   需要loader
3. 优化  (SPA越来越盛行，前端项目复杂度高， webpack可以对项目进行优化)
---------------------------------
webpack构成:
1. 入口   entry
2. 出口	output
3. loaders  转化器
4. plugins  插件
5. devServer 开发服务器
6. mode   
------------------------------------------------------------------
先必须确保node环境已经安装
	nodejs.org  -> download -> 下一步
------------------------------------------------------------------
安装webpack:
	npm install webpack-cli -g
	npm install webpack@4.1.0 -g
	OR

	yarn add webpack-cli -g

	验证webpack环境已经ok?
		webpack -v

卸载webpack:
	npm  uninstall  webpack  -g
------------------------------------------------------------------
package.json  项目主要依赖配置文件

	npm init -y

------------------------------------------------------------------
开发环境: (development)
	就是你平时编写代码的环境

	npm i jquery --save-dev
	npm i jquery -D
生产环境: (production)
	项目开发完毕，部署上线
	 
	npm i jquery --save
	npm i jquery -S
--------------------------------------------------------------------

npm i jquery
npm un jquery


npm i jquery --save-dev
npm i jquery --save

npm i jquery --save-dev jquery
--------------------------------------------------------------------

npm i jquery loadsh aaa bbb ccc -D

--------------------------------------------------------------------
cnpm如何配置:
	npm install -g cnpm --registry=https://registry.npm.taobao.org

--------------------------------------------------------------------
跑一跑webpack:
	终端里运行:
		webpack src\index.js --output dist/bundle.js
--------------------------------------------------------------------
webpack.config.js    webpack配置文件

	预览:

		module.exports={
			//入口配置
			entry:{},
			//出口配置
			output:{},
			//module.rules
			//loaders
			module:{},
			//插件
			plugins:[],
			//开发服务器
			devServer:{}
		};
--------------------------------------------------------------------
module.exports={
    //入口配置
    entry:{
        a:'./src/index.js'
    },
    //出口配置
    output:{
        path:__dirname+'/dist', //path必须是绝对路径
        filename:'bundle.js'
    }
};
--------------------------------------------------------------------
const path = require('path'); //node系统模块
module.exports={
    //入口配置
    entry:{
        a:'./src/index.js'
    },
    //出口配置
    output:{
        path:path.resolve(__dirname,'dist'), //path必须是绝对路径
        filename:'bundle.js'
    }
};
--------------------------------------------------------------------
配置文件名字一定得叫 webpack.config.js  答: 不是

如果改名叫:  mmr.config.js

	运行时候:

	webpack --config mmr.config.js
--------------------------------------------------------------------
npm run dev
npm run build

npm scripts:

	package.json:

		"scripts": {
		    	"build": "webpack --config mmr.config.js",
			"dev":"xxx",
			"aaa":"xxx"
		  }
--------------------------------------------------------------------
parcel   零配置
--------------------------------------------------------------------
webpack4.x 实现所谓的0配置:
	
--------------------------------------------------------------------
mode:

	webpack --mode development
		
	webpack --mode production 
		明显文件被压缩

--------------------------------------------------------------------

多入口(多文件)打包一起:
	const path = require('path');
	module.exports = {
		entry:['./src/index.js','./src/index2.js'],  //按照顺一起打包 bundle.js
		output:{
			path:path.resolve(__dirname, 'dist'),
			filename:'bundle.js'
		}
	};
--------------------------------------------------------------------
多入口多出口配置:
	const path = require('path');
	module.exports = {
		entry:{
			index:'./src/index.js',
			index2:'./src/index2.js'
		},
		output:{
			path:path.resolve(__dirname, 'dist'),
			filename:'[name].bundle.js'
		}
	};
--------------------------------------------------------------------
npm i webpack-cli -g
--------------------------------------------------------------------

html-webpack-plugin:
手册：https://www.npmjs.com/package/html-webpack-plugin#

	* 注意: 依赖webpack、webpack-cli
	（npm i webpack -D  npm i webpack-cli -D  ）
	生成页面

	1. 安装
		npm i html-webpack-plugin -D
	2. 引入
		const HtmlWebpackPlugin = require('html-webpack-plugin');
	3. 使用
		plugins:[
			new HtmlWebpackPlugin()
		]
	----------------------------------------------------
	html-webpack-plugin:
		模板:
			new HtmlWebpackPlugin({
				template:'模板地址'
			})
		页面标题:
			new HtmlWebpackPlugin({
				title:'xxxxx',
				template:'模板地址'
			})

			一定记得在模板中使用:
		生成连接消除缓存:
			new HtmlWebpackPlugin({
				hash:true,
				title:'xxxxx',
				template:'模板地址'
			})
		压缩输出:
			new HtmlWebpackPlugin({
				minify:{
					collapseWhitespace:true,  //压缩空白
					removeAttributeQuotes:true //删除属性双引号
				},
				hash:true,
				title:'I Love China',
				template:'./src/index.html'
			})
		生成多个页面:
			filename:'xxx'
		多页面分别引入自己的js:
			chunks:['index']

	https://www.npmjs.com/package/html-webpack-plugin#

以上使用的例子：
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
module.exports={
	/*入口配置*/
	entry:{
		/*a：名字随意起*/
		index: './src/index.js',
		index2: './src/index2.js'
	},
	/*出口配置*/
	output:{
		/*path整体打包路径,必须是绝对路径，
		__dirname代表当前webpack.config.js所在目录，是绝对路径*/
		path:path.resolve(__dirname , 'dist'),
		/*filename名字固定，可以生成两个js文件，这个name是入口文件entry的key值*/
		filename:'[name].bundle.js'
	},
	/*能自动生成dist目录（index.bundle.js,index2.bundle.js等）*/
	plugins:[
		
		new HtmlWebpackPlugin({	
			/*压缩输出*/
			// minify:{
			// 	collapseWhitespace:true/*折叠空白区域*/

			// },
			/*生成链接消除缓存，每个生成的文件名都不一样,类似于这样："index.bundle.js?3e368073ad67e336b700"*/
			// hash:'true',
			/*引入js文件*/
			chunks:['index'],
			/*生成html文件的名字*/
			filename:'index.html',
			/*可以编辑生成的index文件的标题*/
			title:'i an',
			/*模板地址*/
			template:'./src/index.html'
		}),
		new HtmlWebpackPlugin({
			// 引入js文件
			chunks:['index2'],
			/*生成html页面的名字*/
			filename:' index2.html',
			/*可以编辑生成的index文件的标题*/
			title:'第二个页面',
			/*模板地址*/
			template:'./src/index2.html'
		})
	]
};
结果：可以在生成dist目录，目录中有两个js文件和两个html文件，一个为index.html和index2.html文件，分别引用js文件
--------------------------------------------------------------------
clean-webpack-plugin:	删除某些东西(清除)
	1. 下载
		cnpm i clean-webpack-plugin -D
	2. 引入
		const CleanWebpackPlugin = require('clean-webpack-plugin');
	3. 使用:
		new CleanWebpackPlugin(['dist'])
--------------------------------------------------------------------
devServer:
	1. 下载（如果出错可以一直下载，就是建议把node_modules也删了重新下载）
		cnpm i webpack-dev-server -D
	2. 使用
		devServer:{
		        //设置服务器访问的基本目录
		        contentBase:path.resolve(__dirname, 'dist'),
		        //服务器ip地址， localhost
		        host:'localhost',
		        //设置端口
		        port:8090
		    }

	此时  pakcage.json:
		"scripts": {
			"build": "webpack --mode development",
			"dev":"webpack-dev-server --mode development"
		}

	想自动打开浏览器:
		open:true

	热更新:
		hot:true

		开启:
			new webpack.HotModuleReplacementPlugin()

	https://webpack.js.org/configuration/dev-server/
例子：
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const webpack = require('webpack');
module.exports={
	/*入口配置*/
	entry:{
		/*a：名字随意起*/
		index: './src/index.js',
		index2: './src/index2.js'
	},
	/*出口配置*/
	output:{
		/*path整体打包路径,必须是绝对路径，
		__dirname代表当前webpack.config.js所在目录，是绝对路径*/
		path:path.resolve(__dirname , 'dist'),
		/*filename名字固定，可以生成两个js文件，这个name是入口文件entry的key值*/
		filename:'[name].bundle.js'
	},
	devServer:{
		/*设置服务器访问的基本目录*/
		contentBase:path.resolve(__dirname , 'dist'),
		host:'localhost',
		port:8090,
		open:true,/*自动打开页面*/
		hot:true
	},
	/*能自动生成dist目录（index.bundle.js,index2.bundle.js等）*/
	plugins:[
		/*清除dist文件夹*/
		/*new CleanWebpackPlugin(['dist']),*/
		/*配置热更新，先const引入，然后在plugins中配置一下，然后在dexServer中将hot打开
		*/
		new webpack.HotModuleReplacementPlugin(),
		new HtmlWebpackPlugin({
			// 引入js文件
			chunks:['index'],
			/*生成html页面的名字*/
			filename:' index.html',
			/*可以编辑生成的index文件的标题*/
			title:'china',
			/*模板地址*/
			template:'./src/index.html'
		})
	]
};

--------------------------------------------------------------------
loaders:  在webpack里面是一个很重要功能
	加载器、转化器
	比如: less/scss 转成css
	        ES7 8
	        jsx
--------------------------------------------------------------------
处理css文件:
	style-loader
	css-loader

		cnpm i style-loader css-loader -D

	配置:
		module:{
			rules:[
				{
					test:/\.css$/,
					use:['style-loader','css-loader']
				}
			]
		}

	关于loader写法:
		1. use:['xxx-loader','xxx-loader']
		2. loader:['xxx-loader','xxx-loader']
		3. use:[
	                    {loader:'style-loader'},
	                    {loader:'css-loader'}
	                ]
--------------------------------------------------------------------
打包完以后肯定需要压缩上线:
	如何压缩:
	1. webpack4.x
		--mode production
	2. 之前版本
		uglifyjs-webpack-plugin

		a). cnpm i uglifyjs-webpack-plugin -D
		b). const uglify = require('xxx);
		c). new ugliufy()      /*在plugin中添加*/
--------------------------------------------------------------------		
图片: (png,jpg,gif)
	url-loader
	file-loader

	1. cnpm i file-loader url-loader -D
	2. 配置
		{
	                test:/\.(png|jpg|gif)$/,
	                use:[{
	                    loader:'url-loader',
	                    options:{
	                          limit:50，
			 outputPath:'images'
	                    }
	                }]
	            }
--------------------------------------------------------------------
分离:  css
	extract-text-webpack-plugin

	1. cnpm i extract-text-webpack-plugin -D		webpack3.x
	
		cnpm i extract-text-webpack-plugin@next -D	webpack4.x
	2. 在plugins里面应用
		new ExtractTextPlugin(提取出去的路径)

		use:ExtractTextPlugin.extract({
		    fallback:'style-loader',
		    use:'css-loader',
		    publicPath:'../' //解决css背景图，路径问题
		})
	3. 遇见一些小事
--------------------------------------------------------------------		
mini-css-extract-plugin:   截止到目前为止(2018-3-23)，对背景图路径配置
	API文档
	下载：npm i mini-css-extract-plugin -D
	引入：在文件的最开头引入
	使用：pulgins中配置如下
	new MiniCssExtractPlugin({
	    filename:'css/index.css'
	})
	在module中css部分配置如下：
	use[
	   MiniCssEctractPlugin.loader,'css-loader'
	]

例：loaders ,css,图片,分离css, mini-css-extract-plugin
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
/*const MiniCssExtractPlugin = require('mini-css-extract-plugin');*/
module.exports={
	entry:{
		index: './src/index.js',
	},
	output:{
		path:path.resolve(__dirname , 'dist'),
		filename:'[name].bundle.js'
	},
	/*如果想使用css文件的话，配置module模块，并且这里面都是固定配置，名字不能改变*/
	module:{
		rules:[
			{
				/*加载css，将css文件提取*/
				test:/\.css$/,
			 	use:['style-loader' , 'css-loader'],
				/*上面的语句等价于：
				loader:['style-loader' , 'css-loader']
					也等价于：
				use:[
				//必须先写style-loader然后写css-loader
					{loader:'style-loader'},
					{loader:'css-loader'}
				]*/
				use:ExtractTextPlugin.extract({
					fallback:'style-loader',
					use:'css-loader',
					// 配css里面背景图的路径
					publicPath:'../'
				})
				/*use:[
					MiniCssExtractPlugin.loader,
					'css-loader'
				]*/
			},
			{
				/*将图片打包，并且放在images文件夹中*/
				test:/\.(png|jpg|gif)$/,
				use:{
					loader:'url-loader',
					/*当图片大小超过limit值时，图片就转为路径形式，而不是base64,base64特点与路径无关，*/
					options:{
						limit : 50,
						outputPath:'images'
					}
				}
			}
		] 
	},
	/*如果在package.json中写的是mode production的话，就是压缩模式，就是将文件打包压缩*/
	devServer:{
		contentBase:path.resolve(__dirname , 'dist'),
		host:'localhost',
		port:8090,
		open:true,
		hot:true
	},
	plugins:[
		new webpack.HotModuleReplacementPlugin(),
		new HtmlWebpackPlugin({
			title:'china',
			template:'./src/index.html'
		}),
		new ExtractTextPlugin('css/index.css'),
		/*new MiniCssExtractPlugin({
			filename:'css/index.css',
		})*/
	]
};
--------------------------------------------------------------------
less:
	1. cnpm i less less-loader -D
	2.在index.js中import引入a.less文件
	3module中rules
	. {
		test:/\.less$/,
		use:['style-loader','css-loader','less-loader']
	}


分离less:（把less也扔到index.css中）
	{
                test:/\.less$/,
                //use:['style-loader','css-loader','less-loader']
                use:ExtractTextPlugin.extract({
                    fallback:'style-loader',
                    use:['css-loader','less-loader']
                })
            }
--------------------------------------------------------------------
sass:（同less一样一样的）
	cnpm i node-sass sass-loader -D

	配置:
	{
                test:/\.(sass|scss)$/,
                use:['style-loader','css-loader','sass-loader']
            }

提取sass:
	{
                test:/\.(sass|scss)$/,
                use:ExtractTextPlugin.extract({
                    fallback:'style-loader',
                    use:['css-loader','sass-loader']
                })
            }
--------------------------------------------------------------------		
transform:

-webkit-transform:

自动处理前缀:

	postCss	预处理器

	专门处理css平台

1. cnpm i postcss-loader
	autoprefixer -D

2. 准备 postcss.config.js   配置postCss
	module.exports ={
		plugins:[
			require('autoprefixer')
		]
	};
3. 配置loader
	use:[
                    {loader:'style-loader'},
                    {loader:'css-loader'},
                    {loader:'postcss-loader'}
                ]
4. 提取出来
	use:ExtractTextPlugin.extract({
                    fallback:'style-loader',
                    use:['css-loader','postcss-loader'],
                    publicPath:'../' //解决css背景图，路径问题
                })
--------------------------------------------------------------------
消除冗余css代码:
	Purifycss

	1. 下载

		cnpm i purifycss-webpack purify-css -D
	2. 引入插件
		const PurifyCssWebpack = rewquire('purifycss-webpack');
		const glob = require('glob');
	3. 需要引入一个额外包
		glob
		cnpm i glob -D
	4. 在plugins里面配置
		new PurifyCssWebpack({
		            paths:glob.sync(path.join(__dirname, 'src/*.html'))
		        })
---------------------------------------------
调试:
	webpack4.x 开启调试:
		--mode development

	webpack3.x之前:
		sourceMap

		devtool:'source-map',

---------------------------------------------
babel:（webpack已经实现了支持esnext所有语法)
	- babel用来编译js
	- 让你很轻松的使用 ESnext,转化
	- jsx

如果碰到不支持的
	1.那就先下载插件，然后在module中的rules中配置如下选项(这里配置的只是一个预设，得把它装在.babelrc文件中才能成功)
	2.然后再新建一个.babelrc文件，配置如下

babel-core	bable-loader    babel-preset-env

	1. 下载
		cnpm i babel-loader babel-core babel-preset-env -D
	2. 配置
		{
	                test:/\.(js|jsx)$/,
	                use:['babel-loader'],
	                exclude:/node_modules/
	            }
	3.babelrc文件配置
	{
	  "presets":{
		  "env"
		}
	}
	ESnext所有语法
---------------------------------------------
jsx:
	cnpm i babel-preset-react -D
	cnpm i react react-dom -D
---------------------------------------------
在webpack中用模块化:
	和node一模一样

	导出:（新建文件存储模块，例如webpack.rules.js,然后最后把存储数据的变量利用下面一行语句导出）
		module.exports = xxx
	引入:（在webpack.config.js文件头用下面语句导入，记得一定要加./   代表本地文件）
		require('./xxxxx');
---------------------------------------------
在webpack中使用json:
	json-loader

	到webpack.3x版本之后不用，json可以默认就识别
	1.先创建json文件，例如webpack.config.json
		{
			"entry":"./src/index.js"
		}
	2.在webpack.config.js文件头部导入利用如下语句
		记住，不可用import，webpack不支持，但是在src下的index.js也就是入口文件这里可以用
		因为这个index.js文件可以利用webpack.config.js文件中的babel模块包装，
	const jsonConfig = require('./webpack.config.json');
	3.具体引用；jsonConfig.entry
---------------------------------------------
静态资源输出:
	copy-webpack-plugin

	1. 下载
		cnpm i copy-webpack-plugin -D
	2. 引入
		const CopyWebpackPlugin = require('copy-webpack-plugin');
	3. 使用
		plugins:[
			new CopyWebpackPlugin([{
				from:path.resolve(__dirname, 'src/assets'),
				to:'./public'
			}])
		]
---------------------------------------------	
官网->插件什么的：
https://webpack.js.org/plugins/copy-webpack-plugin/

都在npm上:
www.npmjs.com
	

	github  issues
---------------------------------------------
使用第三库:
	1. 直接npm下载，然后引入（完全可以使用，但是我个人不是很推荐）
		cnpm i jquery -S
		
		import $ from 'jquery'

		$(xxxx).on()
		$(xxx).css()
	2. ProvidePlugin	(个人推荐此方式)
		const webpack = require('webpack');

		在plugins里面使用:
		
			new webpack.ProvidePlugin({
				$:'jquery',
				lodash:'lodash'
				....
			})

	通过ProvidePlugin和 import直接引入区别:
		1. import $...，引入之后，无论你在代码中是否使用jquery，打包后，都会打进去，这样其实产生大量的冗余js
		2. Provideplugin, 只有你在使用到此库，才会打包
--------------------------------------------------------
提取第三方(自己感觉想提取)js库:
	之前webpack3.x版本之前:
		
		new webpack.optimize.CommonsChunkPlugin({
		    name:'jquery'
		})

	到了webpack4.x版本:
		optimization.splitChunks

		optimization:{
			splitChunks:{
				cacheGroups:{
					vendor:{
					    chunks:'initial',
					    name:'jquery',
					    enforce:true
					}
				}
			}
		}
		----------------------------------------------
		optimization:{
			splitChunks:{
				cacheGroups:{
					aaa:{
					    chunks:'initial',
					    name:'jquery',//和入口entry中key名一样，最后生成jquery.bundle.js文件
					    enforce:true
					},
					/*如果再要生成一个文件，就entry入口key值和这个name值要对应*/
					bbb:{
					    chunks:'initial',
					    name:'入口名称',
					    enforce:true
					}
				}
			}
		}
--------------------------------------------------------
http://mmr.ke.qq.com

官方QQ群: 651661013
--------------------------------------------------------
全部：webpack-demo文件夹中

webpack.config.js文件：

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const PurifyCssWebpack = require('purifycss-webpack');
const glob = require('glob');
/*./为了区分用npm下载的模块和本地下载的模块*/
const rulesConfig = require('./webpack.rules.js');
const jsonConfig = require('./webpack.config.json');
/*const MiniCssExtractPlugin = require('mini-css-extract-plugin');*/

const CopyWebpackPlugin = require('copy-webpack-plugin');
module.exports={
	entry:{
		index: jsonConfig.entry,
		jquery:'jquery'
	},
	output:{
		path:path.resolve(__dirname , 'dist'),
		filename:'[name].bundle.js'
	},
	/*如果想使用css文件的话，配置module模块，并且这里面都是固定配置，名字不能改变*/
	/*创建单独的文件webpack.rules.js,存储rules文件，然后导出到这里就行了*/
	module:rulesConfig,
	/*如果在package.json中写的是mode production的话，就是压缩模式，就是将文件打包压缩*/
	devServer:{
		contentBase:path.resolve(__dirname , 'dist'),
		host:'localhost',
		port:8090,
		open:true,
		hot:true
	},
	plugins:[
		new webpack.HotModuleReplacementPlugin(),
		new HtmlWebpackPlugin({
			title:'china',
			template:'./src/index.html'
		}),
		new ExtractTextPlugin('css/index.css'),
		/*new MiniCssExtractPlugin({
			filename:'css/index.css',
		})*/
		new PurifyCssWebpack({
			/*sync同步的方法
			join用来合并路径的,其实和resolve没啥区别
			*/
			/*作用：根据路径找模版，根据模版找哪些引用css，哪些没引用css，然后把没被引用的css的给删了*/
			paths:glob.sync(path.join(__dirname , 'src/*.html'))
		}),
		/*静态资源输出*/
		new CopyWebpackPlugin([{
			from:path.resolve(__dirname,'src/assets'),
			to:'./public'
		}]),
		new webpack.ProvidePlugin({
			$:'jquery'
		})
	],
	optimization:{
		splitChunks:{
				cacheGroups:{
					ventor:{
						chunks:'initial',
						name:'jquery',
						enforce:true
				}
			}
		}
	}
}

webpack.rules.js文件：

const ExtractTextPlugin = require('extract-text-webpack-plugin');
const rules = {
	rules:[
			{
				/*加载css，将css文件提取*/
				test:/\.css$/,
			 	/*use:['style-loader' , 'css-loader'],*/
				/*上面的语句等价于：
				loader:['style-loader' , 'css-loader']
					也等价于：
				*/
				/*use:[
				//必须先写style-loader然后写css-loader
					{loader:'style-loader'},
					{loader:'css-loader'},
					{loader:'postcss-loader'}
				]*/

				/*提取分离css*/
				use:ExtractTextPlugin.extract({
					fallback:'style-loader',
					use:['css-loader','postcss-loader'],
					// 配css里面背景图的路径
					publicPath:'../'
				})
				/*use:[
					MiniCssExtractPlugin.loader,
					'css-loader'
				]*/
			},
			/*配置bebel，为了支持esnext语法，不过webpack现在已经都支持了，但是要知道是这么配的*/
			/*{
				test:/\.(js|jsx)$/,
				use:['babel-loader'],
				exclude:/node_modules/
			},*/
			{
				/*将图片打包，并且放在images文件夹中*/
				test:/\.(png|jpg|gif)$/,
				use:{
					loader:'url-loader',
					/*当图片大小超过limit值时，图片就转为路径形式，而不是base64,base64特点与路径无关，*/
					options:{
						limit : 50,
						outputPath:'images'
					}
				}
			},
			{
				test:/\.less/,
				/*顺序：先是less-loader修饰，然后css-loader加载，然后再扔到style-loader，也就是use里面的顺序是从右往左的*/
				/*use:['style-loader' , 'css-loader' , 'less-loader']*/
				use:ExtractTextPlugin.extract({
					fallback:'style-loader',
					use:['css-loader' , 'less-loader']
				})
			}/*,
			{
				test:/\.sass$/;
				use:['style-loader','css-loader' ,'sass-loader']
			}*/
		] 
};
module.exports = rules;



	




	

	

	

	

			
		












