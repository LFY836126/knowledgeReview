第一天01：

1. jQuery基本概念

1.1 为什么要学习jquery？
js实现功能
<input type="button" value="展示"id="btn1" >
<input type="button" value="显示内容" id="btn2">
<div></div>
<div></div>
<div></div>
<script type="text/javascript">
    var btn1 = document.getElementById('btn1');
    var btn2 = document.getElementById('btn2');
    var divs = document.getElementsByTagName('div');

    btn1.onclick = function(){
        for(var i = 0; i < divs.length; i++){
            divs[i].style.display = "block";
        }
    }
    btn2.onclick = function(){
        for(var i = 0; i < divs.length; i++){
            divs[i].innerText = "我是内容";
        }
    }
</script>
/*不爽的地方：
    1.需要遍历，可能还需要嵌套
    2.找对象麻烦，方法少，还长，
    3.兼容性问题
     innerText低版本火狐浏览器不支持，火狐支持textContent，
     但是ie不支持textContent
    4.如果想要实现简单的动态效果，animate
    5.如果想要把script代码放上面，还需要window.onload
      等到页面加载完后才执行
    6.js注册事件，会被覆盖，addEventListener
    */

1.2   jQuery初体验
用jQuery改善：
    <script src="jquery-1.12.4.js"></script>
    <script>
        /*入口函数标准写法*/
        $(document).ready(function(){  //很少进行赋值操作，一般都把函数作为参数传进来
            $('#btn1').click(function(){
                $("div").show (3000);
            });
            $("#btn2").click(function(){
                $("div").text("我是内容");
            });
        });   /*文档准备好了才执行*/
    </script>
<body>
<input type="button" value="展示"id="btn1" >
<input type="button" value="显示内容" id="btn2">
<div></div>
<div></div>
<div></div>
</body>
容易出错的地方：
1.最典型的就是把margin-bottm去掉了
2.然后有的把#去掉了
3.下面的id部分，有的是把btn写在了value中，所以会找不到

优点总结：没有对比，就没有伤害，有了对比，处处戳中要害。
1. 查找元素的方法多种多样，非常灵活
2. 拥有隐式迭代特性，因此不再需要手写for循环了。
3. 完全没有兼容性问题。
4. 实现动画非常简单，而且功能更加的强大。
5. 代码简单、粗暴。

1.3. 什么是jQuery?

jQuery核心，就是jQuery是JS库
API就是功能的意思
jquery是2006年出现的

jquery从2.0之后就放弃兼容IE6，8了
之前的jquery一般会有两个版本，一般1.x有个版本，然后2.x就有一个对应的版本，一个兼容IE，一个不兼容IE。后来因为jquery不兼容IE了，就出了3.x版本，不再兼容IE

国内一般jquery1.x比较流行。
因为能兼容IE6，IE8
而且国内window操作系统比较单一，都是window或者linux，但是外国操作系统五花八门，国外的可能用jquery3.x版本就比较多

1.4. jQuery的版本
官网下载地址：http://jquery.com/download/ jQuery版本有很多，分为1.x 2.x 3.x

大版本分类：
1.x版本：能够兼容IE678浏览器（但是用IE5的话，因该也不会出问题，最多是样式改变了，而且即使出问题，也不怪jquery，因为人家说了是兼容6及以上）
2.x版本：不兼容IE678浏览器
1.x和2.x版本jquery都不再更新版本了，现在只更新3.x版本。
3.x版本：不兼容IE678，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）
关于压缩版和未压缩版

jquery-1.12.4.min.js:压缩版本，适用于生产环境，因为文件比较小，去除了注释、换行、空格等东西，但是基本没有颗阅读性。
jquery-1.12.4.js:未压缩版本，适用于学习与开发环境，源码清晰，易阅读。

几个环境：
开发环境：正常写代码
测试环境：服务器（测试，目的就是找一切问题）
生产环境：服务器（对用户开放，不能有bug）
这三个环境共同的环境  -->  git
开发环境：未压缩版本jquery使用
生产环境：压缩版本jquery（带min的）适用

jquery标签写哪里？
写在哪里都行，推荐写下面。当jquery写在下面时，入口函数都可以不写，因为入口函数的作用就是等加载完再执行，但是推荐写上入口函数

报错：$ is not defined
就是jquery引入错误

1.5. jQuery的入口函数

使用jQuery的三个步骤：
1. 引入jQuery文件
2. 入口函数
3. 功能实现

jQuery入口函数与js入口函数的对比
1.    JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。
2.    jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。
3.    js的入口函数要比jQuery的入口函数执行的晚一些

例1：
<script src="jquery-1.12.4.js"></script>
<script>
    window.onload = function(){
        console.log("这是第三种");
    }
    $(document).ready(function(){
        console.log("这是第一种方式");
    });
    $(function(){
        console.log("这是第二种方式");
    })
</script>
执行结果为1,2,3

1.6. jQuery对象与DOM对象的区别（重点）（联想记忆：洗衣服和洗衣机）
1. DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。
2. jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。
3. jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））
4. DOM对象与jQuery对象的方法不能混用，因为是两个不同的对象。（js对象不能调用jq对象的方法，jq不能调用js对象，但是js对象可以自己调用自己的方法）

DOM对象的缺点（这只是一部分）：
1.说白了，DOM对象需要一个一个的操作，所以才需要遍历麻烦
2.有兼容性问题
3.事件会覆盖

什么是jQuery对象：
说白了就是jquery内部放了好多个DOM对象，然后jquery还有好多好多方法，我要操作这些对象，我只需要调用这些方法就行

js对象和jq对象的联系 ：
jq对象其实就是js对象的集合，伪数组，里面放了一大堆js对象（宏观上）

例1：
<script src="jquery-1.12.4.js"></script>
<script>
    $(function(){
        var cloth = document.getElementById('cloth'); //js对象
        var $li = $("li");                            //用$l就是一个习惯，代表jquery对象
        $li.text("我是内容");                     //所有的li内容变为"我是内容"
        cloth.text("hehe");                      //改变不了li的值，报错
    })
</script>
例2：
<script src="jquery-1.12.4.js"></script>
<script>
    $(function(){
        var cloth = document.getElementById('cloth'); //js对象
        var $li = $("li");
        console.log($li);
        //用$l就是一个习惯，代表jquery对象
    })
</script>
打印jquery就是一个类数组，存了4个jquery

DOM对象转换成jQuery对象：【联想记忆：花钱】
var $obj = $(domObj);
// $(document).ready(function(){});就是典型的DOM对象转jQuery对象

例3：
var cloth = document.getElementById('cloth'); //js对象
$(cloth).text("hehe");

jq对象装换为DOM对象
var $li = $(“li”);
//第一种方法（推荐使用）
$li[0]
//第二种方法
$li.get(0)

例1：
        var $li = $("li");
        $li[0].style.backgroundColor = "red";
$li[0]和$li.get(0) 等价的

总结就是
什么是DOM对象：就是用js的方式获取到的对象
什么是jq对象，就是用jquery的方式获取到的对象就是jq对象
区别与联系：
区别：两个的方法不能混着用
联系：可以相互转化 jq对象-->$li[0] / $li.get(0) -->DOM对象，DOM对象通过$(li)变为js对象

例：
<ul>
    <li>"我是第1个"</li>
    <li>"我是第2个"</li>
    <li>"我是第3个"</li>
    <li>"我是第4个"</li>
    <li>"我是第5个"</li>
    <li>"我是第6个"</li>
    <li>"我是第7个"</li>
    <li>"我是第8个"</li>
    <li>"我是第9个"</li>
    <li>"我是第10个"</li>
</ul>
<script src="jquery-1.12.4.js"></script>
<script>
    $(function(){
        var lis = $("li")
        for(var i = 0 ; i < lis.length; i++){
            if(i % 2 == 0){
                lis[i].style.backgroundColor = "pink";
            }
            else{
                lis[i].style.backgroundColor = "red";
            }
        }
    })
</script>
不会报错，因为lis是jq对象，但是lis[i]就是DOM对象，所以不会报错。

$是什么？
$其实就是一个函数，以后用$的时候，记得跟小括号
参数不同，功能就不同
三种用法：
1.参数是function -->就是入口函数
2.把DOM对象转化为jquery对象，还有入口函数$(document).ready(function(){})实质上也是DOM对象转为jquery的过程
3.参数是一个字符串，用来找对象

例1：
    $(function(){
        console.log(typeof($));
    })

2. 选择器

2.1什么是jQuery选择器
jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。
jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。【查看jQuery文档】
jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。
例1：div下的ul
$("div ul")

2.2基本选择器
名称	                用法          	描述
ID选择器	                $(“#id”);	获取指定ID的元素
类选择器	                $(“.class”);	获取同一类class的元素
标签选择器	$(“div”);	获取同一类标签的所有元素
并集选择器	$(“div,p,li”);	使用逗号分隔，只要符合条件之一就可。
交集选择器	$(“div.redClass”);	获取class为redClass的div元素
总结：跟css的选择器用法一模一样。
例1:ID选择器
        $("#four").css("backgroundColor","red");
例2：类选择器：
        $(".green").css("backgroundColor","green");
例3:标签选择器
        $('li').css("color" , "red");

交集并集
例1：并集
        $("#four,.green").css("backgroundColor","red");
例2：交集
        $("li.green").css("backgroundColor","red");

2.3层级选择器
名称	                用法        		 描述
子代选择器	$(“ul>li”);	使用>号，获取儿子层级的元素，注意，并不会获取孙子层级的元素
后代选择器	$(“ul li”);	使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等
跟CSS的选择器一模一样。
例1:子代选择器
div id="father">
<div>22
    <p>111</p>
</div>
<p>66</p>
</div>
<script src="jquery-1.12.4.js"></script>
<script>
    $(function(){
        $('#father>p ').css("backgroundColor","red");
    })
</script>
//father下面的子代选择器<p>66</p>的颜色改变
例2：后代选择器
<div id="father">
<div>22
    <p>111</p>
</div>
<p>66</p>
</div>
<script src="jquery-1.12.4.js"></script>
<script>
    $(function(){
        $('#father p ').css("backgroundColor","red");
    })
</script>
//father下面的后代选择器，只要是p，颜色就改变

$("ul li")   : 后代选择器
$("ul>li") : 子代选择器
$("ul , li") : 并集选择器
$("ul.li")   : 交集选择器（其实交集选择器不只这一种，就是两个选择器黏在一起，没什么特定的形式）

mouseover：鼠标经过事件
mouseout：鼠标离开事件
mouseenter：鼠标进入事件
mouseleave：鼠标离开事件
区别：
不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。
只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件
所以一般都是用mouseenter

2.4过滤选择器
:eq（index）	$(“li:eq(2)”).css(“color”, ”red”);	获取到的li元素中，选择索引号为2的元素，索引号index从0开始。
:odd          	$(“li:odd”).css(“color”, ”red”);	获取到的li元素中，选择索引号为奇数的元素
:even        	$(“li:even”).css(“color”, ”red”);	获取到的li元素中，选择索引号为偶数的元素
:first          	$(“li:first”).css(“color”, ”red”);	获取到的li元素中，选择索引号为第一个的元素
:last          	$(“li:last”).css(“color”, ”red”);	获取到的li元素中，选择索引号为最后一个的元素

例1：
偶数
        $("li:even").css("backgroundColor","red");
奇数
        $("li:odd").css("backgroundColor","blue");
第一个
        $("li:first").css("fontSize" , "32px");
最后一个
        $("li:last").css("fontSize" , "32px");
等于
        $("li:eq(1)").css("fontSize" , "32px");
小于
        $("li:lt(1)").css("fontSize" , "32px");
大于
        $("li:gt(1)").css("fontSize" , "32px");

表单对象属性选择器：

2.5筛选选择器
名称          	用法                          	描述
children(selector)	$(“ul”).children(“li”)	相当于$(“ul>li”)，子类选择器
find(selector)	$(“ul”).find(“li”);	相当于$(“ul li”),后代选择器
siblings(selector)	$(“#first”).siblings(“li”);	查找兄弟节点，不包括自己本身。
parent()    	$(“#first”).parent();	查找父亲
eq(index) 	$(“li”).eq(2);         	相当于$(“li:eq(2)”),index从0开始
next()       	$(“li”).next()         	找下一个兄弟
prev()       	$(“li”).prev()         	找上一次兄弟

例1：谁触发的this就指向谁，this是DOM对象
$(".wrap>ul>li").mouseEnter(function(){
                console.log(this);
                $(this).children();
            })
这样就选出了this的所有子元素，而且返回的是jq对象，类数组
要是我像选出孩子中的ul，并且保证孩子也是jq对象，用什么办法呢？
$(this).children("ul");
这样就选出来了

例2：找到后代中的所有li，然后改变css属性
$(this).find("li").css("opacity" , 1);

show()：展示
hide()  :  隐藏
text()   : 改变值类似于DOM中的innerText

链式编程：在jQuery中，方法可以一直调用下去，因为每个方法返回的都是一个jQuery对象

$("#center>li").eq(idx)  返回jq对象，比较常用
$("#center>li").get(idx) 返回js对象

jquery纠错技巧：
1.找不到对象
之前js中报错的原因就是没找到任何东西的时候会返回一个none，none身上没有任何属性和方法，所以会报错，
在这里，即使什么也没找到，但是返回的也是一个jq对象，只不过里面没有DOM对象而已，所以，是jq对象就能调用自己的方法，没有问题，所以不报错。

index详解：
jquery中很难看到属性这个东西，一般都是方法
index()会返回当前元素在所有兄弟元素里面的索引
例1：要在li上绑定点击事件而不是a，因为要用到索引时，a没有兄弟元素，所以都会返回0。
    <li><a href="#">我是链接</a></li>
    <li><a href="#">我是链接</a></li>

jq和js的区别
js是一门编程语言，
jq仅仅是基于js的一个库，jq可以理解为开发js的工具而已
世界上55%的网站都用到了jquery，只要是PC端一般都会用jquery，但是移动端一般用zepto，因为更小更轻量
console.log($ === jquery)

复习01：
概念：
  //概念
  //1. 为什么要学jquery ？ 简单，粗暴 没有兼容性问题
  //2. 什么是jquery？js库，说白了就是js文件，里面有一大堆的方法
  //3. 使用jquery的步骤：  1. 引入jquery文件 2. 入口函数 功能实现
  //4. 版本：1.x 2.x 3.x   我们用：1.x   测试时压缩版，平时用未压缩版
  //5. 入口函数：  $(document).ready(function)  $(function(){})
  //6. jQuery对象与DOM对象
    //区别：方法不能混用
    //联系： DOM-->jq   花钱  jq-->dom  [0]  get(0)
  
  
  //$的实质：function
  
//  console.log($ === jQuery);  -->true
//  $(function () {   <==>jQuery(function(){})
//
//  });
  
  
  //选择器
  
  //基本选择器  标签 类  id选择器  交集  并集
  //层级选择器： 子代 后代
  
  //过滤选择器：
  //:odd:奇数  even:偶数  :eq：指定下标
  //:first  :last  :gt  :lt

  //筛选选择器
  //children():找儿子
  //find():找后代
  //parent():找爹
  //siblings():找兄弟，不包括自己
  //next:下一个兄弟
  //prev:上一次兄弟
  //eq:指定下标
  
  
  //index()：返回的当前元素在所有兄弟里面的索引。

第二天02：

1.jQuery操作样式

1.1css操作：设置单个样式，设置多个样式，获取样式
js中有几种方式可以改变一个盒子的大小：
1.className  改变的是类样式，会出现权重的问题，
2.style  改的是行内样式，不会出现权重的问题，因为行内权重比较高

css("name","value")
name:样式名      value:样式值
在jq中这样写是可以的，最终还是会转化为fontSize的，推荐写fontSize，但是这样写不会错。
.css("font-size" , "32px");

css(obj):修改多个样式
例1：
    $(function(){
        $("li").css({
            backgroundColor:"pink",
            color:"red",
            fontSize:"32px",
        })

    })
css(name):获取样式
name:想要获取的样式
例1：
        console.log($("li").css("fontSize"));
        console.log($("li").css("backgroundColor"));
这样css这个方法就有三个作用了，设置单个样式，设置多个样式，获取样式

隐式迭代：设置操作的时候，会给jq内部的所有对象都设置上相同的值
获取的时候，只会返回第一个元素对应的值
例1：只会返回20px
        $("li").eq(0).css("fontSize","20px");
        $("li").eq(1).css("fontSize","21px");
        $("li").eq(2).css("fontSize","22px");
        $("li").eq(3).css("fontSize","23px");
        console.log($("li").css("fontSize"));

1.2class操作：
添加类：addClass()
移除类：removerClass()
判断类：hasClass()
转换类：toggle()

css添加类addClass(name)：
例1：我们jq只是往上添加样式，但是具体怎么显示还是和css有关系
就像这个例子，要是先点的是第二个input，再点第一个input，那么字体大小就要看权重，权重一样就看先后顺序，所以依旧是40px
CSS：
        .basic{
            background-color:pink;
            font-size:32px;
        }
        .bigger{
           font-size:40px;
        }
jq部分：
   $(function(){
        $("input").eq(0).click(function(){
            $("li").addClass("basic");
        })
        $("input").eq(1).click(function(){
            $("li").addClass("bigger");
        })
    })

css移除一个类removeClass(name)
例1：
 $("input").eq(2).click(function(){
            $("li").removeClass("bigger");
        })
例2：判断li中没有basic这个类，如果有移除它，如果没有添加它
 $("input").eq(4).click(function(){
            if($("li").hasClass("basic")){
                $("li").removeClass("basic");
            }
            else{
                $("li").addClass("basic");
            }
        })
根据这个例题引出toggleClass()
$("li").toggleClass("basic")等价于上面一大串

注意：
$(".tab-item")  选出类的时候，一定要有.
$(this)         this一定不要加双引号

2.jQuery操作属性

2.1   attr：设置单个属性，设置多个属性，获取属性
样式：在style里面写的，用css来操作
属性：在标签里面写的，用attr方法来操作

设置单个属性，用css就不行，但是和css用法一样：
attr(name,value)
例1：
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1285926623,355654242&fm=27&gp=0.jpg" alt="蓝天" title="对对对">
$("img").attr("alt","诶呀妈呀");
//部分代码省略

设置多个属性，
attr({  })
例1：
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1285926623,355654242&fm=27&gp=0.jpg" alt="蓝天" title="对对对">
$("img").attr({
                alt:"不是蓝天，哈哈",
                title:"错了吧",
            })
//部分代码省略

设置一个没有的属性：
例1：
$("img").attr({
                aa:"bb",
            })
<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1285926623,355654242&fm=27&gp=0.jpg" alt="蓝天" title="对对对">
//部分代码省略

获取属性
console.log($("img").attr("alt"));

做萌宠图册：详见另个萌宠图册文件夹

webstrom
ctrl + h批量替换
ctrl + f查找

2.2  prop：设置单个属性，设置多个属性，获取属性
全世界最大的问答网站:stackOverflow（都是关于计算机方面的，但是英文的）
坑：attr checked失效，这个在jQuery1.6之前用完全没有问题，但是之后就出现失效的问题了
<input type="button" value="选中">
<input type="button" value="不选中">
<input type="checkbox" id="ck">
$(function(){
            $("input").eq(0).click(function(){
                $("#ck").attr("checked" , true);
            })
            $("input").eq(1).click(function(){
                $("#ck").attr("checked" , false);
            })
        })
//这个只好用一次，再就不好用了

对于布尔类型的属性，不要用attr属性，应该用prop方法：（对于没设置的属性attr拿到的就是undefind，prop拿到的是false，像checked，selected，disabled等）
上道题的更改：将attr换为prop
        $(function(){
            $("input").eq(0).click(function(){
                $("#ck").prop("checked" , true);
            })
            $("input").eq(1).click(function(){
                $("#ck").prop("checked" , false);
            })
        })

/*下面所有的input中被选中的那些input*/
$("#j_tb input:checked")，然后它是个伪数组，那么就可以有length属性
$("#j_tb input:checked").length  就能得到他的长度
做表格全选案例：详见另一个文件夹

2.3
removeAtrr(name)：移除属性
例1：移除div的title的属性
$("div").removeAttr("title");

3.jQuery动画：jquery提供了三组基本动画，这些动画都是标准的，有规律的效果，jquery还提供了自定义动画的功能

3.1三组基本动画
显示show与隐藏hide
滑入slideDown与滑出slideUp和切换slideToggle
淡入fadeIn与淡出fadeOut与切换fadeToggle

show()不传参数没有动画效果（一般都不传参数，因为动画不好看）

show(speed)
speed：动画的持续时间，可以是毫秒值，还可以是固定字符串
"fast":200ms	"normal":400ms	"slow":600ms
show("hehe") -->默认是normal400ms

show还可以是回调函数
show([speed] , [callback])
例1：动画结束显示haha
 $("div").show(1000,function(){
                    console.log("haha");
                });

hide：
例1：
$("input").eq(1).click(function(){
                $("div").hide();
            })

做轮播图

3.2自定义动画

animate({}   ,    ,    );参数只有第一个必填
            /*第一个参数：对象 里面可以传需要对象的样式*/
            /*第二个参数：speed 动画的执行时间*/
            /*第三个参数：动画的效果*/
            /*第四个参数：回调函数*/
例1：默认是swing摇摆的
            $("#box1").animate({left:800} , 1000);
            /*swing :秋千 摇摆*/
            $("#box2").animate({left:800} , 1000 , "swing");
            /*linear :线性，匀速*/
            $("#box3").animate({left:800} , 1000 , "linear");

做手风琴案例

3.3动画队列与停止动画
在同一个元素上执行多个动画，那么对于这个动画来说，后面的动画会被放入到动画队列中，等前面的动画执行完之后才会执行（联想：火车进站）
动画队列：
            /*将这些动画存储到一个动画队列里面
            好处：动画不会丢掉，肯定会执行
            坏处：需要时间*/

停止动画：
stop：停止当前正在执行的动画
加stop的目的，就是停止前面执行的动画，然后立马执行stop后面的动画
两个参数
clearQueue：是否清除动画队列 true false
jumpToEnd：是否跳转到当前动画的最终效果   true false
例1：stop(false , true)：就是不清除动画队列，然后跳转到当前动画的最终效果

例1：
$(this).stop().animate({width:800}).siblings().stop().animate({width:100});

做出手风琴案例的优化

例2：
        $("input").eq(0).click(function(){
            $("div").slideDown(4000).slideUp(4000);
        })

        $("input").eq(1).click(function(){
            $("div").stop(true , false);
        })

<!--音频标签   controls代表有进度条，没有代表隐藏-->
<audio src="" controls="controls"></audio>
<!--视频标签 controls="autoplay"就是自动播放 loop 就是循环播放   可以设置视频宽度width="400"-->
<!--<video src="" controls="controls"></video>-->

做出音乐键导航栏

4.jQuery节点操作

4.1创建节点：
创建jquery对象：
append可以传进去一个jquery对象

例1：
var $li = $('<a href="#">小仙女</a>');
$("#box").append($li);

例2：两步：内部生成jquery对象,再插入div中
$("#box").append('<a href="#">小仙女</a>');

4.2添加节点

append：添加子元素最后面
prepend：添加到子元素最前面
appendTo：子元素添加到父元素最后面，和append实现效果差不多
prependTo：子元素添加到父元素最前面，和prepend实现效果差不多
after：添加在后面作为兄弟元素
before：添加在前面作为兄弟元素

例1：将p元素添加到div子元素最后面
<div id="box">内容</div>
<p>P元素</p>
$(function(){
        $("div").append($("p"));
    })
例2：将p元素添加到div子元素最前面
<div id="box">内容</div>
<p>P元素</p>
$(function(){
        $("div").prepend($("p"));
    })
例3：将p元素添加到div子元素最后面
<div id="box">内容</div>
<p>P元素</p>
$(function(){
        $("p").appendTo($("div"));
    })
例4：将p元素添加到div子元素最前面
<div id="box">内容</div>
<p>P元素</p>
$(function(){
        $("p").prependTo($("div"));
    })
例5：将p元素添加到div元素后面作为兄弟元素
<div id="box">内容</div>
<p>P元素</p>
$(function(){
        $("div").after($("p"));
    })
例6：将p元素添加到div元素前面作为兄弟元素
<div id="box">内容</div>
<p>P元素</p>
$(function(){
        $("div").before($("p"));
    })

做出城市选择案例

4.3清空节点与删除节点

清空节点（清理门户）：
$("div").empty();会将绑定的事件也清空
一般不会用$("div").html("");因为会发生内存泄露，因为要是div中有元素绑定了事件，那么不会清空那个事件，会占用内存

删除节点：
自杀：$("div").remove();

4.4克隆节点：clone()
false:不传参数也是深度复制,不会复制事件
true:也是深度复制,会复制事件
不传参数默认是false
例1：
<div>
    <p>1111</p>
    <p>2222</p>
</div>
<p class="des">我是外面的p元素 </p>
 $(function(){
        /*$("div").html("");*/
        /*false:不传参数也是深度复制,不会复制事件*/
        /*true:也是深度复制,会复制事件*/
        $(".des").click(function(){
            alert("hehe");
        })
        $(".des").clone(true).appendTo("div");
    })
ture：克隆的也就是div中的p，点击也会有事件
false：克隆的也就是div中的p，点击不会有事件
默认：克隆的p，点击不会有事件

做出微博弹幕案例
$("#txt").val()：取出#txt中的值，
$("#txt").val().trim().length == 0：判断#txt中的内容是否为空
$("#txt").val("");：将#txt中的内容清空，以便下次输入

做出弹幕效果案例

复习：
 //1. 操作样式 (5)
  //1.1 css操作
      //设置单个样式
      //设置多个样式
      //获取样式
  //1.2 class操作
      //addClass(name):添加类
      //removeClass(name):移除类
      //hasClass(name):判断类
      //toggleClass(name):切换
  
  //2. 操作属性(3)
    //2.1 attr
      //设置单个属性
      //设置多个属性
      //获取属性
    //2.2 prop
      //对于布尔类型的属性，disabled，selected，checked，只能用prop
  
    //2.3 removeAttr(name):移除某个属性
  
  //3. 动画  (10)
    //3.1 三组基本动画
      //show/hide   slideDown/slideUp/slideToggle  fadeIn/fadeOut/fadeToggle
    //3.2 自定义动画
      //animate(prop, [speed], [swing/linear], [callback])
    //3.3 停止动画
      //stop
  
  
  //4. 操作节点(10)
    //4.1 创建节点:  $("<span></span>")
    //4.2 添加节点   append appendTo prepend prependTo after before
    //4.3 清空内容   empty
    //4.4 删除节点   remove
    //4.5 克隆节点   clone

第三天

1. jQuery特殊属性操作

1.1. val方法
val方法用于设置和获取表单元素的值，例如input、textarea的值
//设置值
$("#name").val(“张三”);
//获取值
$("#name").val();

操作value一般用val方法
例1：
<input type="button" value="hehe1" id="btn">
<input type="text" id="txt">
    console.log($("#btn").val());
    console.log($("#btn").attr("value"));
    $("#txt").val("haha");
例2：京东搜索输入框聚焦和失去焦点
<input type="text" id="txt" value="小仙女">
  $(function(){
    $("#txt").focus(function(){
      if($(this).val() === "小仙女"){
        $(this).val("");
      }
    })
    $("#txt").blur(function(){
      if($(this).val() === ""){
        $(this).val("小仙女");
      }
    })
  })

1.2. html方法与text方法
html方法相当于innerHTML text方法相当于innerText，但是text没有兼容性，innerText火狐不可用

//设置内容
$(“div”).html(“<span>这是一段内容</span>”);
//获取内容
$(“div”).html()

//设置内容
$(“div”).text(“<span>这是一段内容</span>”);
//获取内容
$(“div”).text()
例1：
    <div><h3>我是标题</h3></div>
    html:innerHTML  text:innerText有兼容性问题
    console.log($("div").html());
    console.log($("div").text());
例2：
    console.log($("div").html("<p>我是段落</p>"));
    console.log($("div").text("我是段落"));
区别：html方法会识别html标签，text方法会将内容直接当成字符串，并不会识别html标签。

1.3. width方法与height方法：只是获取width和height不包括padding
设置或者获取高度

//带参数表示设置高度
$(“img”).height(200);
//不带参数获取高度
$(“img”).height();
获取网页的可视区宽高

//获取可视区宽度
$(window).width();
//获取可视区高度
$(window).height();
例1：设置宽高
//      css方法
      console.log($("div").css("width"));
      $("div").css("width","400px");
//      width方法
      $("div").width();
      $("div").width(400);
例2：获取页面可视区的宽度和高度
      $(window).resize(function(){
          console.log($(window).width());
          console.log($(window).height());
      });

获取padding+width的值(不包括border)：$("div").innerWidth()
获取padding+width+border的值：$("div").outerWidth()
获取padding+width+border+margin的值：$("div").outerWidth(true)

1.4. scrollTop与scrollLeft
设置或者获取垂直滚动条的位置

//获取页面被卷曲的高度
$(window).scrollTop();
//获取页面被卷曲的宽度
$(window).scrollLeft();
例1：必须写在scroll函数中
      $(window).scroll(function(){
          console.log($(window).scrollTop());
          console.log($(window).scrollLeft());
      })
window本身是个dom对象，所以利用$()将它转化为jquery对象，要是写的是$("window")它找的就是window标签。

【案例：仿腾讯固定菜单栏案例】 【案例：小火箭返航案例】
注意：
/!*window没有scrollTop属性,但是body和html有*!/
$(window).animate({scrollTop:0}

 /*pageYOffset是只读属性*/
$(window).animate({pageYOffset:0})

IE8是单独html就可以
Chome是单独body就可以，所以都写上万无一失
$("html,body").animate({scrollTop:0});
若是想要直接返回顶部，那就让window.scrollTop(0)就好了

1.5. offset方法与position方法，只能获取，不能设置
offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素的位置。

//获取元素距离document的位置,返回值为对象：{left:100, top:100}
$(selector).offset();
//获取相对于其最近的有定位的父元素的位置。
$(selector).position();

例1：
        获取元素的相对于document的位置，不管父亲有没有定位
        console.log($(".son").offset());
        获取元素相对于有定位的父元素的位置
        console.log($(".son").position());

2. jQuery事件机制
JavaScript中已经学习过了事件，但是jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。
事件机制就是和事件相关的绑定，解绑等

2.1. jQuery事件发展历程(了解)
简单事件绑定>>bind事件绑定>>delegate事件绑定>>on事件绑定(推荐)

简单事件注册

click(handler)            单击事件
mouseenter(handler)        鼠标进入事件
mouseleave(handler)        鼠标离开事件
缺点：不能同时注册多个事件

bind方式注册事件

//第一个参数：事件类型
//第二个参数：事件处理程序
$("p").bind("click mouseenter", function(){
    //事件响应方法
});
缺点：不支持动态事件绑定

例1：click
$("p").click(function(){
            alert("呵呵");
        })
例2：bind绑定点击事件
$("p").bind("click mouseenter",function(){
            alert("哈哈");
        })
例3：bind绑定两个不同的事件click和mouseenter和不同的处理函数
        $("p").bind({
            click:function(){
                alert("呵呵");
            },
            mouseenter:function(){
                alert("哈哈");
            }
        })
例3：问新创建出的p会不会有绑定事件
        $("#btn").click(function(){
            $("<p>我是新增的p</p>").appendTo($("div"));
        })
        $("p").click(function(){
            alert("呵呵");
        })
新创建的p不会有点击事件，因为btn只是绑定个click事件，但是并没有执行，只有点击时候执行，才会创建p元素，然而此时已经给之前的p绑定完事件了，不包括新创建出来的
向上面利用bind和click这样方式绑定事件并不实时

delegate注册委托事件
//1. 给父元素注册委托事件   2.最终还是由子元素来执行。
// 第一个参数：selector，要绑定事件的元素
// 第二个参数：事件类型
// 第三个参数：事件处理函数
$(".parentBox").delegate("p", "click", function(){
    //为 .parentBox下面的所有的p标签绑定事件
});
优点：动态创建的也能有事件
缺点：只能注册委托事件，因此注册事件需要记得方法太多了

例1：点击p元素输出heh1,点击div其他部分没什么效果
        $("div").delegate("p" , "click" , function(){
            alert("heh1");
            console.log(this); // 返回的是p，因为最终还是p执行的
        })
要是新增p元素，新增的p也在div中，所以新增的p也有事件
简单事件：给自己注册事件
委托事件：由自己指定的子元素执行，

2.2. on注册事件(重点)
jQuery1.7之后，jQuery用on统一了所有事件的处理方法。

最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。

on注册简单事件

// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。
$(selector).on( "click", function() {});
例1：
        $("p").on("click" , function(){
            alert("hehe");
        })

on注册委托事件

// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定
$(selector).on( "click",“span”, function() {});
例2：
        $("div").on("click" , "p" , function(){
            alert("呵呵");
        })

on注册事件的语法：

// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）
// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。
// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）
// 第四个参数：handler，事件处理函数
$(selector).on(events[,selector][,data],handler);

例1：先是p自己的事件，然后是div委托事件，然后是div自己的事件
        $("p").on("click" , function(){
            alert("自己的事件p");
        })
        $("div").on("click" , "p" , function(){
            alert("div委托事件");
        })
        $("div").on("click" , function(){
            alert("div自己的事件");
        })

2.3. 事件解绑
unbind方式（不用）

$(selector).unbind(); //解绑所有的事件
$(selector).unbind("click"); //解绑指定的事件
undelegate方式（不用）

$( selector ).undelegate(); //解绑所有的delegate事件
$( selector).undelegate( “click” ); //解绑所有的click事件
off方式（推荐）

// 解绑匹配元素的所有事件
$(selector).off();
// 解绑匹配元素的所有click事件
$(selector).off("click");
例1：
        $("p").on("click mouseenter" , function(){
            console.log("呵呵");
        })
        $("p").off("click");
        $("p").off();
传参数，移除那个事件绑定
不传参数，都移除，没有事件

2.4. 触发事件
$(selector).click(); //触发 click事件
例1：
        $("#btn").on("click" , function(){
            $("p").click();
        })

$(selector).trigger("click");
例2：
        $("#btn").on("click" , function(){
            $("p").trigger("click");
        })

2.5. jQuery事件对象
jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。

//screenX和screenY    	应屏幕最左上角的值
//clientX和clientY    距离页面左上角的位置（忽视滚动条）
//pageX和pageY    距离页面最顶部的左上角的位置（会计算滚动条的距离）

//event.keyCode    按下的键盘代码
//event.data    存储绑定事件时传递的附加数据

//event.stopPropagation()    阻止事件冒泡行为
//event.preventDefault()    阻止浏览器默认行为
//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。
【案例：钢琴版导航	（加强）.html】
例1：我最终得到的值都是0， 因为我点击div才执行里面的东西，然而里面的money已经是0了
        $("div").on("click" , function(){
            console.log("我有" + money);
        })
        money = 0;
        $("p").on("click" , function(){
            console.log("我有" + money);
        })
改正：我把money的值100传进了e.data中，所以money不管怎么变，得到的值都是100
        var money = 100;
        $("div").on("click" , money,function(e){
            console.log("我有" + e.data);
        })
        money = 0;
        $("p").on("click" , function(){
            console.log("我有" + money);
        })
例2：
        $("#link").on("click" , function(e){
            alert("呵呵");
            e.stopPropagation();
            e.preventDefault();
        })
        $("body").on("click" , function(){
            alert("哈哈");
        })

做出钢琴按键导航栏
注意：
节流阀  ：按下的时候，触发，如果没弹起，不让触发下一次

delay的用法：延迟多久发生
例1：

        div{
            width:400px;
            height:400px;
            background-color:pink;
            text-align:center;
            line-height:50px;
            margin:100px auto;
            display:none;
        }
$("div").fadeIn(1000).delay(2000).fadeOut(1000);
一秒钟出来，然后延迟两秒钟消失，消失用了1秒钟

3. jQuery补充知识点

3.1. 链式编程（返回的是jquery对象时才能链式编程）
通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。
设置性操作：可以链式编程
获取性操作：不能链式，因为获取性操作返回的是数值或者字符串等
根本上的原因就是判断返回值是不是一个jquery对象

end(); // 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。

【案例：五角星评分案例.html】
注意链式编程中返回的jquery对象的问题
            $(this).text(wjx_s).prevAll().text(wjx_s);
            $(this).nextAll().text(wjx_k); 
/*这里这句不能直接和前一句放在一起，因为上一句经过prevAll后内部的1jquery对象已经不是this了，是this前面的两个*/
但是即使现在的jquery对象已经不是最初的this了，但是jquery对象中海保留着最初的this。所以要是非要继续链式下去，那么利用
$(this).text(wjx_s).prevAll().text(wjx_s).end().nextAll().text(wjx_k);
就可以实现前面的效果

3.2. each方法
jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。

作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数

// 参数一表示当前元素在所有匹配元素中的索引号
// 参数二表示当前元素（DOM对象）
$(selector).each(function(index,element){});
例1：给每个li添加不透明度属性
1.用for形式
        for(var i = 0; i < $("li").length; i ++){
            $("li").eq(i).css("opacity" , (i + 1)/10);
        }
2.推荐：用each形式，因为是在函数中操作的，比较方便
        $("li").each(function(index , element){
            $(element).css("opacity" , (index + 1) / 10);
        })

【案例：不同的透明度.html】

3.3. 多库共存
jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.

var c = $.noConflict();//释放$的控制权,并且把$的能力给了c
例1：本来打印出的$应该是jquery中的$，但是中间$.noConflict()，$就释放了$符的控制权，所以打印出的$是别的文件的$，但是它可以用副本jQuery继续使用自己的$
要是把jquery的引用写在下面，就会报错，因为$本来也不属于jquery
<script src="$冲突.js"></script>
<script src="jquery-1.12.4.js"></script>
<script>
    $.noConflict();
    console.log($);
    jQuery(function(){
        
    })
</script>
也可以用这种方式（推荐）
    var $$ = $.noConflict();
    $$(function(){

    })

复习：
 //1. 特殊的属性操作
  // val()
  // text() 与 html()
  // width height
  //scrollTop scrollLeft
  //offset position
  
  
  //2. 事件
  //注册事件  on
  // on("click", function(){})
  // on("click", "p", function(){})
  
  // off() off("click")
  
  //click()  trigger("click")
  
  // e.stopPropagation()
  // e.preventDefault()
  // return false;

    
  //3. 补充
  
  //链式编程：end()
  //each
  //$.noConflict();

第四天：  

1. 插件

1.1. 常用插件
插件：jquery不可能包含所有的功能，我们可以通过插件扩展jquery的功能。

jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能。

使用插件的步骤

1. 引入jQuery文件
2. 引入插件（如果有用到css的话，需要引入css，还有一定要先引入jquery再引入插件，因为插件中有些变量是依赖于jquery文件的）
3. 使用插件

1.1.1. jquery.color.js
animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。
例1：正常jquery中animate无法实现背景渐变的改变，但是可以利用jquery插件实现
<script src="jquery-1.12.4.js"></script>
<script src="jquery.color.js"></script>
<script>
  $(function () {
    //说明jquery不支持颜色的渐变,颜色最好用16进制
    $('div').animate({backgroundColor:"#ffc0cb"}, 3000, function () {
        alert("呵呵");
    });
  
  });
实现div背景渐变为黑色

1.1.2. jquery.lazyload.js
懒加载插件
例2：懒加载：就是图片暂时不加载，等 到它 时候再加载
<body>
<div style="height:4000px"></div>
<img  class="lazy" data-original="02.gif" alt="">
<script src="jquery-1.12.4.js"></script>
<script src="jquery.lazyload.js"></script>
<script>
    $(function(){
        $("img.lazy").lazyload();
    })
</script>
</body>
滑到img区域时候，再加载图片。
注意：
1.图片的路径属性名不是src，是data-original
2.插件一定放在jquery文件后引入
3.一般在图片比较多，页面比较长的时候，用懒加载插件，要是就一张图片，直接用src引用就行，不用这么麻烦
4.最好将需要懒加载的图片加一个类 class="lazy"，然后将src变为data-original，这样在后面直接写$(".lazy").lazyload()就可以将部分图片懒加载了


1.1.3. jquery.ui.js插件
jQueryUI专指由jQuery官方维护的UI方向的插件。

官方API：http://api.jqueryui.com/category/all/

其他教程：jQueryUI教程

基本使用:

1.    引入jQueryUI的样式文件
2.    引入jQuery
3.    引入jQueryUI的js文件
4.    使用jQueryUI功能

使用jquery.ui.js实现新闻模块的案例
注意：下面是大致代码
        $(".drag-wrapper").draggable({
            /*让.drag-wrapper可以拖动，但是有因为我只想在拖动头时候才跟着拖动，拖动内容时候，不跟着拖动，所有加个参数，一个对象
            只让拖动.drag-bar的时候，这个大的div才跟着拖动*/
            handle:".drag-bar"
        });
        $(".sort-item").sortable({
            /*让ul（.sort-item）可以手动任意排序，并且排序过程中的li透明度是0.3*/
            opacity:0.3
        });
        $(".resize-item").resizable({
            /*让内容区.resize-item只能向south南方向放大，不能在其他方向延伸*/
            handles:"s",
        });

1.2. 制作jquery插件
原理：jquery插件其实说白了就是给jquery对象增加一个新的方法，让jquery对象拥有某一个功能。
实质：就是给jquery的原型上增加方法
例1:
    $(function(){
        $.fn.bgColor = function(color){
            /*this就是一个jquery对象*/
            this.css("backgroundColor" , color);
            return this;
        }
        $("div").bgColor("red");
    })
然后将那个函数保存到外部js文件中去，以后再调用利用...js引入，就是一个简易的jquery插件

封装的越好的东西，使用的就越方便，你改的就越麻烦。

//通过给$.fn添加方法就能够扩展jquery对象
$.fn. pluginName = function() {};
制作手风琴插件